/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-sqlite";
import {
    sqliteTable,
    index,
    uniqueIndex,
    foreignKey,
    integer,
    text,
    numeric,
} from "@payloadcms/db-sqlite/drizzle/sqlite-core";
import { sql, relations } from "@payloadcms/db-sqlite/drizzle";

export const orders_timeline = sqliteTable(
    "orders_timeline",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        id: text("id").primaryKey(),
        title: text("title").notNull(),
        date: text("date")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        type: text("type", {
            enum: [
                "note",
                "order_created",
                "order_paid",
                "order_cancelled",
                "refund_issued",
                "fulfillment_started",
                "shipped",
                "delivered",
                "return_requested",
                "return_completed",
                "other",
            ],
        }).notNull(),
        createdBy: integer("created_by_id").references(() => users.id, {
            onDelete: "set null",
        }),
        details: text("details"),
    },
    (columns) => ({
        _orderIdx: index("orders_timeline_order_idx").on(columns._order),
        _parentIDIdx: index("orders_timeline_parent_id_idx").on(
            columns._parentID
        ),
        orders_timeline_created_by_idx: index(
            "orders_timeline_created_by_idx"
        ).on(columns.createdBy),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [orders.id],
            name: "orders_timeline_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const orders = sqliteTable(
    "orders",
    {
        id: integer("id").primaryKey(),
        orderId: text("order_id").notNull(),
        totalAmount: numeric("total_amount").notNull(),
        user: integer("user_id").references(() => users.id, {
            onDelete: "set null",
        }),
        cart: integer("cart_id").references(() => carts.id, {
            onDelete: "set null",
        }),
        source: text("source", { enum: ["manual", "cj"] }).default("manual"),
        currency: text("currency").notNull(),
        paymentStatus: text("payment_status", {
            enum: ["pending", "paid", "failed", "refunded"],
        })
            .notNull()
            .default("pending"),
        orderStatus: text("order_status", {
            enum: ["pending", "processing", "shipped", "delivered", "canceled"],
        })
            .notNull()
            .default("pending"),
        payment: integer("payment_id").references(() => payments.id, {
            onDelete: "set null",
        }),
        shipping: integer("shipping_id").references(() => shipping.id, {
            onDelete: "set null",
        }),
        paymentIntentId: text("payment_intent_id"),
        sessionId: text("session_id"),
        sessionUrl: text("session_url"),
        paymentMethod: text("payment_method"),
        receiptUrl: text("receipt_url"),
        metadata: text("metadata", { mode: "json" }),
        shippingAddress: text("shipping_address", { mode: "json" }),
        billingAddress: text("billing_address", { mode: "json" }),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        orders_order_id_idx: uniqueIndex("orders_order_id_idx").on(
            columns.orderId
        ),
        orders_user_idx: index("orders_user_idx").on(columns.user),
        orders_cart_idx: index("orders_cart_idx").on(columns.cart),
        orders_payment_idx: index("orders_payment_idx").on(columns.payment),
        orders_shipping_idx: index("orders_shipping_idx").on(columns.shipping),
        orders_updated_at_idx: index("orders_updated_at_idx").on(
            columns.updatedAt
        ),
        orders_created_at_idx: index("orders_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const collections = sqliteTable(
    "collections",
    {
        id: integer("id").primaryKey(),
        title: text("title").notNull(),
        imageUrl: text("image_url"),
        handle: text("handle"),
        description: text("description"),
        meta_title: text("meta_title"),
        meta_description: text("meta_description"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        collections_handle_idx: index("collections_handle_idx").on(
            columns.handle
        ),
        collections_updated_at_idx: index("collections_updated_at_idx").on(
            columns.updatedAt
        ),
        collections_created_at_idx: index("collections_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const products_sales_channels = sqliteTable(
    "products_sales_channels",
    {
        order: integer("order").notNull(),
        parent: integer("parent_id").notNull(),
        value: text("value", {
            enum: ["all", "onlineStore", "pos", "mobileApp"],
        }),
        id: integer("id").primaryKey(),
    },
    (columns) => ({
        orderIdx: index("products_sales_channels_order_idx").on(columns.order),
        parentIdx: index("products_sales_channels_parent_idx").on(
            columns.parent
        ),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [products.id],
            name: "products_sales_channels_parent_fk",
        }).onDelete("cascade"),
    })
);

export const products_variant_options = sqliteTable(
    "products_variant_options",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        id: text("id").primaryKey(),
        option: text("option").notNull(),
    },
    (columns) => ({
        _orderIdx: index("products_variant_options_order_idx").on(
            columns._order
        ),
        _parentIDIdx: index("products_variant_options_parent_id_idx").on(
            columns._parentID
        ),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [products.id],
            name: "products_variant_options_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const products_variants_options = sqliteTable(
    "products_variants_options",
    {
        _order: integer("_order").notNull(),
        _parentID: text("_parent_id").notNull(),
        id: text("id").primaryKey(),
        option: text("option").notNull(),
        value: text("value").notNull(),
    },
    (columns) => ({
        _orderIdx: index("products_variants_options_order_idx").on(
            columns._order
        ),
        _parentIDIdx: index("products_variants_options_parent_id_idx").on(
            columns._parentID
        ),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [products_variants.id],
            name: "products_variants_options_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const products_variants = sqliteTable(
    "products_variants",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        id: text("id").primaryKey(),
        vid: text("vid"),
        sku: text("sku"),
        imageUrl: text("image_url"),
        price: numeric("price").notNull(),
        originalPrice: numeric("original_price"),
        stockCount: numeric("stock_count").default("0"),
    },
    (columns) => ({
        _orderIdx: index("products_variants_order_idx").on(columns._order),
        _parentIDIdx: index("products_variants_parent_id_idx").on(
            columns._parentID
        ),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [products.id],
            name: "products_variants_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const products_custom_fields = sqliteTable(
    "products_custom_fields",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        id: text("id").primaryKey(),
        name: text("name").notNull(),
        value: text("value"),
    },
    (columns) => ({
        _orderIdx: index("products_custom_fields_order_idx").on(columns._order),
        _parentIDIdx: index("products_custom_fields_parent_id_idx").on(
            columns._parentID
        ),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [products.id],
            name: "products_custom_fields_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const products = sqliteTable(
    "products",
    {
        id: integer("id").primaryKey(),
        pid: text("pid"),
        title: text("title").notNull(),
        currency: text("currency"),
        visible: integer("visible", { mode: "boolean" }).default(true),
        source: text("source", { enum: ["manual", "cj"] }).default("manual"),
        description: text("description").notNull(),
        handle: text("handle"),
        meta_title: text("meta_title"),
        meta_description: text("meta_description"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        products_handle_idx: index("products_handle_idx").on(columns.handle),
        products_updated_at_idx: index("products_updated_at_idx").on(
            columns.updatedAt
        ),
        products_created_at_idx: index("products_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const products_texts = sqliteTable(
    "products_texts",
    {
        id: integer("id").primaryKey(),
        order: integer("order").notNull(),
        parent: integer("parent_id").notNull(),
        path: text("path").notNull(),
        text: text("text"),
    },
    (columns) => ({
        orderParentIdx: index("products_texts_order_parent_idx").on(
            columns.order,
            columns.parent
        ),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [products.id],
            name: "products_texts_parent_fk",
        }).onDelete("cascade"),
    })
);

export const products_rels = sqliteTable(
    "products_rels",
    {
        id: integer("id").primaryKey(),
        order: integer("order"),
        parent: integer("parent_id").notNull(),
        path: text("path").notNull(),
        collectionsID: integer("collections_id"),
        mediaID: integer("media_id"),
    },
    (columns) => ({
        order: index("products_rels_order_idx").on(columns.order),
        parentIdx: index("products_rels_parent_idx").on(columns.parent),
        pathIdx: index("products_rels_path_idx").on(columns.path),
        products_rels_collections_id_idx: index(
            "products_rels_collections_id_idx"
        ).on(columns.collectionsID),
        products_rels_media_id_idx: index("products_rels_media_id_idx").on(
            columns.mediaID
        ),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [products.id],
            name: "products_rels_parent_fk",
        }).onDelete("cascade"),
        collectionsIdFk: foreignKey({
            columns: [columns["collectionsID"]],
            foreignColumns: [collections.id],
            name: "products_rels_collections_fk",
        }).onDelete("cascade"),
        mediaIdFk: foreignKey({
            columns: [columns["mediaID"]],
            foreignColumns: [media.id],
            name: "products_rels_media_fk",
        }).onDelete("cascade"),
    })
);

export const users_roles = sqliteTable(
    "users_roles",
    {
        order: integer("order").notNull(),
        parent: integer("parent_id").notNull(),
        value: text("value", { enum: ["admin", "customer"] }),
        id: integer("id").primaryKey(),
    },
    (columns) => ({
        orderIdx: index("users_roles_order_idx").on(columns.order),
        parentIdx: index("users_roles_parent_idx").on(columns.parent),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [users.id],
            name: "users_roles_parent_fk",
        }).onDelete("cascade"),
    })
);

export const users_sessions = sqliteTable(
    "users_sessions",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        id: text("id").primaryKey(),
        createdAt: text("created_at").default(
            sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`
        ),
        expiresAt: text("expires_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        _orderIdx: index("users_sessions_order_idx").on(columns._order),
        _parentIDIdx: index("users_sessions_parent_id_idx").on(
            columns._parentID
        ),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [users.id],
            name: "users_sessions_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const users = sqliteTable(
    "users",
    {
        id: integer("id").primaryKey(),
        firstName: text("first_name"),
        lastName: text("last_name"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        email: text("email").notNull(),
        resetPasswordToken: text("reset_password_token"),
        resetPasswordExpiration: text("reset_password_expiration").default(
            sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`
        ),
        salt: text("salt"),
        hash: text("hash"),
        loginAttempts: numeric("login_attempts").default("0"),
        lockUntil: text("lock_until").default(
            sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`
        ),
    },
    (columns) => ({
        users_updated_at_idx: index("users_updated_at_idx").on(
            columns.updatedAt
        ),
        users_created_at_idx: index("users_created_at_idx").on(
            columns.createdAt
        ),
        users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
    })
);

export const campaigns = sqliteTable(
    "campaigns",
    {
        id: integer("id").primaryKey(),
        name: text("name").notNull(),
        type: text("type", { enum: ["email", "sms"] })
            .notNull()
            .default("email"),
        status: text("status", {
            enum: ["draft", "scheduled", "sent", "paused"],
        }).default("draft"),
        subject: text("subject"),
        emailTemplate: integer("email_template_id").references(
            () => email_templates.id,
            {
                onDelete: "set null",
            }
        ),
        profile_from: text("profile_from"),
        profile_replyTo: text("profile_reply_to"),
        templateData: text("template_data", { mode: "json" }),
        metrics_sent: numeric("metrics_sent").default("0"),
        metrics_opened: numeric("metrics_opened").default("0"),
        metrics_clicked: numeric("metrics_clicked").default("0"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        campaigns_email_template_idx: index("campaigns_email_template_idx").on(
            columns.emailTemplate
        ),
        campaigns_updated_at_idx: index("campaigns_updated_at_idx").on(
            columns.updatedAt
        ),
        campaigns_created_at_idx: index("campaigns_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const campaigns_rels = sqliteTable(
    "campaigns_rels",
    {
        id: integer("id").primaryKey(),
        order: integer("order"),
        parent: integer("parent_id").notNull(),
        path: text("path").notNull(),
        usersID: integer("users_id"),
    },
    (columns) => ({
        order: index("campaigns_rels_order_idx").on(columns.order),
        parentIdx: index("campaigns_rels_parent_idx").on(columns.parent),
        pathIdx: index("campaigns_rels_path_idx").on(columns.path),
        campaigns_rels_users_id_idx: index("campaigns_rels_users_id_idx").on(
            columns.usersID
        ),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [campaigns.id],
            name: "campaigns_rels_parent_fk",
        }).onDelete("cascade"),
        usersIdFk: foreignKey({
            columns: [columns["usersID"]],
            foreignColumns: [users.id],
            name: "campaigns_rels_users_fk",
        }).onDelete("cascade"),
    })
);

export const media = sqliteTable(
    "media",
    {
        id: integer("id").primaryKey(),
        alt: text("alt").notNull(),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        url: text("url"),
        thumbnailURL: text("thumbnail_u_r_l"),
        filename: text("filename"),
        mimeType: text("mime_type"),
        filesize: numeric("filesize"),
        width: numeric("width"),
        height: numeric("height"),
        focalX: numeric("focal_x"),
        focalY: numeric("focal_y"),
    },
    (columns) => ({
        media_updated_at_idx: index("media_updated_at_idx").on(
            columns.updatedAt
        ),
        media_created_at_idx: index("media_created_at_idx").on(
            columns.createdAt
        ),
        media_filename_idx: uniqueIndex("media_filename_idx").on(
            columns.filename
        ),
    })
);

export const policies = sqliteTable(
    "policies",
    {
        id: integer("id").primaryKey(),
        title: text("title").notNull(),
        description: text("description"),
        handle: text("handle"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        policies_handle_idx: index("policies_handle_idx").on(columns.handle),
        policies_updated_at_idx: index("policies_updated_at_idx").on(
            columns.updatedAt
        ),
        policies_created_at_idx: index("policies_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const gift_cards = sqliteTable(
    "gift_cards",
    {
        id: integer("id").primaryKey(),
        code: text("code").notNull(),
        value: numeric("value").notNull(),
        customer: integer("customer_id").references(() => users.id, {
            onDelete: "set null",
        }),
        expiryDate: text("expiry_date").default(
            sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`
        ),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        gift_cards_customer_idx: index("gift_cards_customer_idx").on(
            columns.customer
        ),
        gift_cards_updated_at_idx: index("gift_cards_updated_at_idx").on(
            columns.updatedAt
        ),
        gift_cards_created_at_idx: index("gift_cards_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const themes_blocks_builder_io = sqliteTable(
    "themes_blocks_builder_io",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        _path: text("_path").notNull(),
        id: text("id").primaryKey(),
        builderIoPublicKey: text("builder_io_public_key").notNull(),
        builderIoPrivateKey: text("builder_io_private_key").notNull(),
        blockName: text("block_name"),
    },
    (columns) => ({
        _orderIdx: index("themes_blocks_builder_io_order_idx").on(
            columns._order
        ),
        _parentIDIdx: index("themes_blocks_builder_io_parent_id_idx").on(
            columns._parentID
        ),
        _pathIdx: index("themes_blocks_builder_io_path_idx").on(columns._path),
        _parentIdFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [themes.id],
            name: "themes_blocks_builder_io_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const themes_blocks_custom_storefront_block = sqliteTable(
    "themes_blocks_custom_storefront_block",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        _path: text("_path").notNull(),
        id: text("id").primaryKey(),
        blockName: text("block_name"),
    },
    (columns) => ({
        _orderIdx: index("themes_blocks_custom_storefront_block_order_idx").on(
            columns._order
        ),
        _parentIDIdx: index(
            "themes_blocks_custom_storefront_block_parent_id_idx"
        ).on(columns._parentID),
        _pathIdx: index("themes_blocks_custom_storefront_block_path_idx").on(
            columns._path
        ),
        _parentIdFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [themes.id],
            name: "themes_blocks_custom_storefront_block_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const themes = sqliteTable(
    "themes",
    {
        id: integer("id").primaryKey(),
        title: text("title").default("Themes"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        themes_updated_at_idx: index("themes_updated_at_idx").on(
            columns.updatedAt
        ),
        themes_created_at_idx: index("themes_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const themes_texts = sqliteTable(
    "themes_texts",
    {
        id: integer("id").primaryKey(),
        order: integer("order").notNull(),
        parent: integer("parent_id").notNull(),
        path: text("path").notNull(),
        text: text("text"),
    },
    (columns) => ({
        orderParentIdx: index("themes_texts_order_parent_idx").on(
            columns.order,
            columns.parent
        ),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [themes.id],
            name: "themes_texts_parent_fk",
        }).onDelete("cascade"),
    })
);

export const carts_cart_items = sqliteTable(
    "carts_cart_items",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        id: text("id").primaryKey(),
        variantId: text("variant_id").notNull(),
        product: integer("product_id")
            .notNull()
            .references(() => products.id, {
                onDelete: "set null",
            }),
        quantity: numeric("quantity").notNull(),
    },
    (columns) => ({
        _orderIdx: index("carts_cart_items_order_idx").on(columns._order),
        _parentIDIdx: index("carts_cart_items_parent_id_idx").on(
            columns._parentID
        ),
        carts_cart_items_product_idx: index("carts_cart_items_product_idx").on(
            columns.product
        ),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [carts.id],
            name: "carts_cart_items_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const carts = sqliteTable(
    "carts",
    {
        id: integer("id").primaryKey(),
        sessionId: text("session_id"),
        customer: integer("customer_id").references(() => users.id, {
            onDelete: "set null",
        }),
        completed: integer("completed", { mode: "boolean" }).default(false),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        carts_customer_idx: index("carts_customer_idx").on(columns.customer),
        carts_updated_at_idx: index("carts_updated_at_idx").on(
            columns.updatedAt
        ),
        carts_created_at_idx: index("carts_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const hero_page_blocks_hero = sqliteTable(
    "hero_page_blocks_hero",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        _path: text("_path").notNull(),
        id: text("id").primaryKey(),
        title: text("title").notNull(),
        subtitle: text("subtitle"),
        ctaButtonText: text("cta_button_text"),
        ctaButtonLink: text("cta_button_link"),
        backgroundImage: integer("background_image_id").references(
            () => media.id,
            {
                onDelete: "set null",
            }
        ),
        blockName: text("block_name"),
    },
    (columns) => ({
        _orderIdx: index("hero_page_blocks_hero_order_idx").on(columns._order),
        _parentIDIdx: index("hero_page_blocks_hero_parent_id_idx").on(
            columns._parentID
        ),
        _pathIdx: index("hero_page_blocks_hero_path_idx").on(columns._path),
        hero_page_blocks_hero_background_image_idx: index(
            "hero_page_blocks_hero_background_image_idx"
        ).on(columns.backgroundImage),
        _parentIdFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [hero_page.id],
            name: "hero_page_blocks_hero_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const hero_page_blocks_carousel = sqliteTable(
    "hero_page_blocks_carousel",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        _path: text("_path").notNull(),
        id: text("id").primaryKey(),
        title: text("title").notNull(),
        subtitle: text("subtitle"),
        backgroundImage: integer("background_image_id").references(
            () => media.id,
            {
                onDelete: "set null",
            }
        ),
        blockName: text("block_name"),
    },
    (columns) => ({
        _orderIdx: index("hero_page_blocks_carousel_order_idx").on(
            columns._order
        ),
        _parentIDIdx: index("hero_page_blocks_carousel_parent_id_idx").on(
            columns._parentID
        ),
        _pathIdx: index("hero_page_blocks_carousel_path_idx").on(columns._path),
        hero_page_blocks_carousel_background_image_idx: index(
            "hero_page_blocks_carousel_background_image_idx"
        ).on(columns.backgroundImage),
        _parentIdFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [hero_page.id],
            name: "hero_page_blocks_carousel_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const hero_page = sqliteTable(
    "hero_page",
    {
        id: integer("id").primaryKey(),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        hero_page_updated_at_idx: index("hero_page_updated_at_idx").on(
            columns.updatedAt
        ),
        hero_page_created_at_idx: index("hero_page_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const hero_page_rels = sqliteTable(
    "hero_page_rels",
    {
        id: integer("id").primaryKey(),
        order: integer("order"),
        parent: integer("parent_id").notNull(),
        path: text("path").notNull(),
        mediaID: integer("media_id"),
    },
    (columns) => ({
        order: index("hero_page_rels_order_idx").on(columns.order),
        parentIdx: index("hero_page_rels_parent_idx").on(columns.parent),
        pathIdx: index("hero_page_rels_path_idx").on(columns.path),
        hero_page_rels_media_id_idx: index("hero_page_rels_media_id_idx").on(
            columns.mediaID
        ),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [hero_page.id],
            name: "hero_page_rels_parent_fk",
        }).onDelete("cascade"),
        mediaIdFk: foreignKey({
            columns: [columns["mediaID"]],
            foreignColumns: [media.id],
            name: "hero_page_rels_media_fk",
        }).onDelete("cascade"),
    })
);

export const footer_page_blocks_basic_footer = sqliteTable(
    "footer_page_blocks_basic_footer",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        _path: text("_path").notNull(),
        id: text("id").primaryKey(),
        copyright: text("copyright", { mode: "json" }).notNull(),
        blockName: text("block_name"),
    },
    (columns) => ({
        _orderIdx: index("footer_page_blocks_basic_footer_order_idx").on(
            columns._order
        ),
        _parentIDIdx: index("footer_page_blocks_basic_footer_parent_id_idx").on(
            columns._parentID
        ),
        _pathIdx: index("footer_page_blocks_basic_footer_path_idx").on(
            columns._path
        ),
        _parentIdFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [footer_page.id],
            name: "footer_page_blocks_basic_footer_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const footer_page = sqliteTable(
    "footer_page",
    {
        id: integer("id").primaryKey(),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        footer_page_updated_at_idx: index("footer_page_updated_at_idx").on(
            columns.updatedAt
        ),
        footer_page_created_at_idx: index("footer_page_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const plugins = sqliteTable(
    "plugins",
    {
        id: integer("id").primaryKey(),
        name: text("name"),
        description: text("description"),
        enabled: integer("enabled", { mode: "boolean" }),
        pluginId: text("plugin_id"),
        svgIcon: text("svg_icon"),
        category: text("category"),
        author: text("author"),
        license: text("license"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        plugins_updated_at_idx: index("plugins_updated_at_idx").on(
            columns.updatedAt
        ),
        plugins_created_at_idx: index("plugins_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const payments_blocks_manual_details = sqliteTable(
    "payments_blocks_manual_details",
    {
        _order: integer("_order").notNull(),
        _parentID: text("_parent_id").notNull(),
        id: text("id").primaryKey(),
        label: text("label"),
        value: text("value"),
    },
    (columns) => ({
        _orderIdx: index("payments_blocks_manual_details_order_idx").on(
            columns._order
        ),
        _parentIDIdx: index("payments_blocks_manual_details_parent_id_idx").on(
            columns._parentID
        ),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [payments_blocks_manual.id],
            name: "payments_blocks_manual_details_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const payments_blocks_manual = sqliteTable(
    "payments_blocks_manual",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        _path: text("_path").notNull(),
        id: text("id").primaryKey(),
        methodType: text("method_type", {
            enum: ["cod", "bankTransfer", "inStore", "other"],
        }).notNull(),
        instructions: text("instructions").notNull(),
        blockName: text("block_name"),
    },
    (columns) => ({
        _orderIdx: index("payments_blocks_manual_order_idx").on(columns._order),
        _parentIDIdx: index("payments_blocks_manual_parent_id_idx").on(
            columns._parentID
        ),
        _pathIdx: index("payments_blocks_manual_path_idx").on(columns._path),
        _parentIdFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [payments.id],
            name: "payments_blocks_manual_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const payments_blocks_stripe = sqliteTable(
    "payments_blocks_stripe",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        _path: text("_path").notNull(),
        id: text("id").primaryKey(),
        providerName: text("provider_name").notNull().default("Stripe"),
        testMode: integer("test_mode", { mode: "boolean" }),
        methodType: text("method_type", {
            enum: ["card", "ach", "auto"],
        }).default("auto"),
        stripeSecretKey: text("stripe_secret_key").notNull(),
        stripeWebhooksEndpointSecret: text(
            "stripe_webhooks_endpoint_secret"
        ).notNull(),
        publishableKey: text("publishable_key").notNull(),
        blockName: text("block_name"),
    },
    (columns) => ({
        _orderIdx: index("payments_blocks_stripe_order_idx").on(columns._order),
        _parentIDIdx: index("payments_blocks_stripe_parent_id_idx").on(
            columns._parentID
        ),
        _pathIdx: index("payments_blocks_stripe_path_idx").on(columns._path),
        _parentIdFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [payments.id],
            name: "payments_blocks_stripe_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const payments = sqliteTable(
    "payments",
    {
        id: integer("id").primaryKey(),
        name: text("name").notNull(),
        enabled: integer("enabled", { mode: "boolean" }).default(true),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        payments_updated_at_idx: index("payments_updated_at_idx").on(
            columns.updatedAt
        ),
        payments_created_at_idx: index("payments_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const locations = sqliteTable(
    "locations",
    {
        id: integer("id").primaryKey(),
        name: text("name").notNull(),
        address: text("address").notNull(),
        coordinates: text("coordinates", { mode: "json" }),
        contactPhone: text("contact_phone"),
        hours: text("hours"),
        enabled: integer("enabled", { mode: "boolean" }).default(true),
        isPickupLocation: integer("is_pickup_location", {
            mode: "boolean",
        }).default(false),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        locations_updated_at_idx: index("locations_updated_at_idx").on(
            columns.updatedAt
        ),
        locations_created_at_idx: index("locations_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const shipping_blocks_custom_shipping = sqliteTable(
    "shipping_blocks_custom_shipping",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        _path: text("_path").notNull(),
        id: text("id").primaryKey(),
        baseRate: numeric("base_rate").notNull(),
        freeShippingMinOrder: numeric("free_shipping_min_order"),
        estimatedDeliveryDays: text("estimated_delivery_days"),
        notes: text("notes"),
        blockName: text("block_name"),
    },
    (columns) => ({
        _orderIdx: index("shipping_blocks_custom_shipping_order_idx").on(
            columns._order
        ),
        _parentIDIdx: index("shipping_blocks_custom_shipping_parent_id_idx").on(
            columns._parentID
        ),
        _pathIdx: index("shipping_blocks_custom_shipping_path_idx").on(
            columns._path
        ),
        _parentIdFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [shipping.id],
            name: "shipping_blocks_custom_shipping_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const shipping = sqliteTable(
    "shipping",
    {
        id: integer("id").primaryKey(),
        name: text("name").notNull(),
        enabled: integer("enabled", { mode: "boolean" }).default(true),
        location: integer("location_id").references(() => locations.id, {
            onDelete: "set null",
        }),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        shipping_location_idx: index("shipping_location_idx").on(
            columns.location
        ),
        shipping_updated_at_idx: index("shipping_updated_at_idx").on(
            columns.updatedAt
        ),
        shipping_created_at_idx: index("shipping_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const checkout_sessions = sqliteTable(
    "checkout_sessions",
    {
        id: integer("id").primaryKey(),
        sessionId: text("session_id"),
        customer: integer("customer_id").references(() => users.id, {
            onDelete: "set null",
        }),
        cart: integer("cart_id")
            .notNull()
            .references(() => carts.id, {
                onDelete: "set null",
            }),
        shipping: integer("shipping_id").references(() => shipping.id, {
            onDelete: "set null",
        }),
        payment: integer("payment_id").references(() => payments.id, {
            onDelete: "set null",
        }),
        shippingAddress: text("shipping_address", { mode: "json" }),
        billingAddress: text("billing_address", { mode: "json" }),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        checkout_sessions_customer_idx: index(
            "checkout_sessions_customer_idx"
        ).on(columns.customer),
        checkout_sessions_cart_idx: index("checkout_sessions_cart_idx").on(
            columns.cart
        ),
        checkout_sessions_shipping_idx: index(
            "checkout_sessions_shipping_idx"
        ).on(columns.shipping),
        checkout_sessions_payment_idx: index(
            "checkout_sessions_payment_idx"
        ).on(columns.payment),
        checkout_sessions_updated_at_idx: index(
            "checkout_sessions_updated_at_idx"
        ).on(columns.updatedAt),
        checkout_sessions_created_at_idx: index(
            "checkout_sessions_created_at_idx"
        ).on(columns.createdAt),
    })
);

export const cj_settings_items = sqliteTable(
    "cj_settings_items",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        id: text("id").primaryKey(),
        productUrl: text("product_url"),
    },
    (columns) => ({
        _orderIdx: index("cj_settings_items_order_idx").on(columns._order),
        _parentIDIdx: index("cj_settings_items_parent_id_idx").on(
            columns._parentID
        ),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [cj_settings.id],
            name: "cj_settings_items_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const cj_settings = sqliteTable(
    "cj_settings",
    {
        id: integer("id").primaryKey(),
        emailAddress: text("email_address"),
        apiToken: text("api_token"),
        refreshToken: text("refresh_token"),
        refreshTokenExpiry: text("refresh_token_expiry").default(
            sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`
        ),
        accessToken: text("access_token"),
        accessTokenExpiry: text("access_token_expiry").default(
            sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`
        ),
        pod: integer("pod_id").references(() => media.id, {
            onDelete: "set null",
        }),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        cj_settings_pod_idx: index("cj_settings_pod_idx").on(columns.pod),
        cj_settings_updated_at_idx: index("cj_settings_updated_at_idx").on(
            columns.updatedAt
        ),
        cj_settings_created_at_idx: index("cj_settings_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const exports = sqliteTable(
    "exports",
    {
        id: integer("id").primaryKey(),
        name: text("name"),
        format: text("format", { enum: ["csv", "json"] })
            .notNull()
            .default("csv"),
        limit: numeric("limit"),
        sort: text("sort"),
        drafts: text("drafts", { enum: ["yes", "no"] }).default("yes"),
        collectionSlug: text("collection_slug").notNull(),
        where: text("where", { mode: "json" }).default("{}"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        url: text("url"),
        thumbnailURL: text("thumbnail_u_r_l"),
        filename: text("filename"),
        mimeType: text("mime_type"),
        filesize: numeric("filesize"),
        width: numeric("width"),
        height: numeric("height"),
        focalX: numeric("focal_x"),
        focalY: numeric("focal_y"),
    },
    (columns) => ({
        exports_updated_at_idx: index("exports_updated_at_idx").on(
            columns.updatedAt
        ),
        exports_created_at_idx: index("exports_created_at_idx").on(
            columns.createdAt
        ),
        exports_filename_idx: uniqueIndex("exports_filename_idx").on(
            columns.filename
        ),
    })
);

export const exports_texts = sqliteTable(
    "exports_texts",
    {
        id: integer("id").primaryKey(),
        order: integer("order").notNull(),
        parent: integer("parent_id").notNull(),
        path: text("path").notNull(),
        text: text("text"),
    },
    (columns) => ({
        orderParentIdx: index("exports_texts_order_parent_idx").on(
            columns.order,
            columns.parent
        ),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [exports.id],
            name: "exports_texts_parent_fk",
        }).onDelete("cascade"),
    })
);

export const email_templates = sqliteTable(
    "email_templates",
    {
        id: integer("id").primaryKey(),
        name: text("name"),
        html: text("html"),
        json: text("json", { mode: "json" }),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        email_templates_updated_at_idx: index(
            "email_templates_updated_at_idx"
        ).on(columns.updatedAt),
        email_templates_created_at_idx: index(
            "email_templates_created_at_idx"
        ).on(columns.createdAt),
    })
);

export const payload_jobs_log = sqliteTable(
    "payload_jobs_log",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        id: text("id").primaryKey(),
        executedAt: text("executed_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        completedAt: text("completed_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        taskSlug: text("task_slug", {
            enum: ["inline", "createCollectionExport"],
        }).notNull(),
        taskID: text("task_i_d").notNull(),
        input: text("input", { mode: "json" }),
        output: text("output", { mode: "json" }),
        state: text("state", { enum: ["failed", "succeeded"] }).notNull(),
        error: text("error", { mode: "json" }),
    },
    (columns) => ({
        _orderIdx: index("payload_jobs_log_order_idx").on(columns._order),
        _parentIDIdx: index("payload_jobs_log_parent_id_idx").on(
            columns._parentID
        ),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [payload_jobs.id],
            name: "payload_jobs_log_parent_id_fk",
        }).onDelete("cascade"),
    })
);

export const payload_jobs = sqliteTable(
    "payload_jobs",
    {
        id: integer("id").primaryKey(),
        input: text("input", { mode: "json" }),
        completedAt: text("completed_at").default(
            sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`
        ),
        totalTried: numeric("total_tried").default("0"),
        hasError: integer("has_error", { mode: "boolean" }).default(false),
        error: text("error", { mode: "json" }),
        taskSlug: text("task_slug", {
            enum: ["inline", "createCollectionExport"],
        }),
        queue: text("queue").default("default"),
        waitUntil: text("wait_until").default(
            sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`
        ),
        processing: integer("processing", { mode: "boolean" }).default(false),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        payload_jobs_completed_at_idx: index(
            "payload_jobs_completed_at_idx"
        ).on(columns.completedAt),
        payload_jobs_total_tried_idx: index("payload_jobs_total_tried_idx").on(
            columns.totalTried
        ),
        payload_jobs_has_error_idx: index("payload_jobs_has_error_idx").on(
            columns.hasError
        ),
        payload_jobs_task_slug_idx: index("payload_jobs_task_slug_idx").on(
            columns.taskSlug
        ),
        payload_jobs_queue_idx: index("payload_jobs_queue_idx").on(
            columns.queue
        ),
        payload_jobs_wait_until_idx: index("payload_jobs_wait_until_idx").on(
            columns.waitUntil
        ),
        payload_jobs_processing_idx: index("payload_jobs_processing_idx").on(
            columns.processing
        ),
        payload_jobs_updated_at_idx: index("payload_jobs_updated_at_idx").on(
            columns.updatedAt
        ),
        payload_jobs_created_at_idx: index("payload_jobs_created_at_idx").on(
            columns.createdAt
        ),
    })
);

export const payload_locked_documents = sqliteTable(
    "payload_locked_documents",
    {
        id: integer("id").primaryKey(),
        globalSlug: text("global_slug"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        payload_locked_documents_global_slug_idx: index(
            "payload_locked_documents_global_slug_idx"
        ).on(columns.globalSlug),
        payload_locked_documents_updated_at_idx: index(
            "payload_locked_documents_updated_at_idx"
        ).on(columns.updatedAt),
        payload_locked_documents_created_at_idx: index(
            "payload_locked_documents_created_at_idx"
        ).on(columns.createdAt),
    })
);

export const payload_locked_documents_rels = sqliteTable(
    "payload_locked_documents_rels",
    {
        id: integer("id").primaryKey(),
        order: integer("order"),
        parent: integer("parent_id").notNull(),
        path: text("path").notNull(),
        ordersID: integer("orders_id"),
        collectionsID: integer("collections_id"),
        productsID: integer("products_id"),
        usersID: integer("users_id"),
        campaignsID: integer("campaigns_id"),
        mediaID: integer("media_id"),
        policiesID: integer("policies_id"),
        "gift-cardsID": integer("gift_cards_id"),
        themesID: integer("themes_id"),
        cartsID: integer("carts_id"),
        "hero-pageID": integer("hero_page_id"),
        "footer-pageID": integer("footer_page_id"),
        pluginsID: integer("plugins_id"),
        paymentsID: integer("payments_id"),
        locationsID: integer("locations_id"),
        shippingID: integer("shipping_id"),
        "checkout-sessionsID": integer("checkout_sessions_id"),
        "cj-settingsID": integer("cj_settings_id"),
        exportsID: integer("exports_id"),
        "email-templatesID": integer("email_templates_id"),
        "payload-jobsID": integer("payload_jobs_id"),
    },
    (columns) => ({
        order: index("payload_locked_documents_rels_order_idx").on(
            columns.order
        ),
        parentIdx: index("payload_locked_documents_rels_parent_idx").on(
            columns.parent
        ),
        pathIdx: index("payload_locked_documents_rels_path_idx").on(
            columns.path
        ),
        payload_locked_documents_rels_orders_id_idx: index(
            "payload_locked_documents_rels_orders_id_idx"
        ).on(columns.ordersID),
        payload_locked_documents_rels_collections_id_idx: index(
            "payload_locked_documents_rels_collections_id_idx"
        ).on(columns.collectionsID),
        payload_locked_documents_rels_products_id_idx: index(
            "payload_locked_documents_rels_products_id_idx"
        ).on(columns.productsID),
        payload_locked_documents_rels_users_id_idx: index(
            "payload_locked_documents_rels_users_id_idx"
        ).on(columns.usersID),
        payload_locked_documents_rels_campaigns_id_idx: index(
            "payload_locked_documents_rels_campaigns_id_idx"
        ).on(columns.campaignsID),
        payload_locked_documents_rels_media_id_idx: index(
            "payload_locked_documents_rels_media_id_idx"
        ).on(columns.mediaID),
        payload_locked_documents_rels_policies_id_idx: index(
            "payload_locked_documents_rels_policies_id_idx"
        ).on(columns.policiesID),
        payload_locked_documents_rels_gift_cards_id_idx: index(
            "payload_locked_documents_rels_gift_cards_id_idx"
        ).on(columns["gift-cardsID"]),
        payload_locked_documents_rels_themes_id_idx: index(
            "payload_locked_documents_rels_themes_id_idx"
        ).on(columns.themesID),
        payload_locked_documents_rels_carts_id_idx: index(
            "payload_locked_documents_rels_carts_id_idx"
        ).on(columns.cartsID),
        payload_locked_documents_rels_hero_page_id_idx: index(
            "payload_locked_documents_rels_hero_page_id_idx"
        ).on(columns["hero-pageID"]),
        payload_locked_documents_rels_footer_page_id_idx: index(
            "payload_locked_documents_rels_footer_page_id_idx"
        ).on(columns["footer-pageID"]),
        payload_locked_documents_rels_plugins_id_idx: index(
            "payload_locked_documents_rels_plugins_id_idx"
        ).on(columns.pluginsID),
        payload_locked_documents_rels_payments_id_idx: index(
            "payload_locked_documents_rels_payments_id_idx"
        ).on(columns.paymentsID),
        payload_locked_documents_rels_locations_id_idx: index(
            "payload_locked_documents_rels_locations_id_idx"
        ).on(columns.locationsID),
        payload_locked_documents_rels_shipping_id_idx: index(
            "payload_locked_documents_rels_shipping_id_idx"
        ).on(columns.shippingID),
        payload_locked_documents_rels_checkout_sessions_id_idx: index(
            "payload_locked_documents_rels_checkout_sessions_id_idx"
        ).on(columns["checkout-sessionsID"]),
        payload_locked_documents_rels_cj_settings_id_idx: index(
            "payload_locked_documents_rels_cj_settings_id_idx"
        ).on(columns["cj-settingsID"]),
        payload_locked_documents_rels_exports_id_idx: index(
            "payload_locked_documents_rels_exports_id_idx"
        ).on(columns.exportsID),
        payload_locked_documents_rels_email_templates_id_idx: index(
            "payload_locked_documents_rels_email_templates_id_idx"
        ).on(columns["email-templatesID"]),
        payload_locked_documents_rels_payload_jobs_id_idx: index(
            "payload_locked_documents_rels_payload_jobs_id_idx"
        ).on(columns["payload-jobsID"]),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [payload_locked_documents.id],
            name: "payload_locked_documents_rels_parent_fk",
        }).onDelete("cascade"),
        ordersIdFk: foreignKey({
            columns: [columns["ordersID"]],
            foreignColumns: [orders.id],
            name: "payload_locked_documents_rels_orders_fk",
        }).onDelete("cascade"),
        collectionsIdFk: foreignKey({
            columns: [columns["collectionsID"]],
            foreignColumns: [collections.id],
            name: "payload_locked_documents_rels_collections_fk",
        }).onDelete("cascade"),
        productsIdFk: foreignKey({
            columns: [columns["productsID"]],
            foreignColumns: [products.id],
            name: "payload_locked_documents_rels_products_fk",
        }).onDelete("cascade"),
        usersIdFk: foreignKey({
            columns: [columns["usersID"]],
            foreignColumns: [users.id],
            name: "payload_locked_documents_rels_users_fk",
        }).onDelete("cascade"),
        campaignsIdFk: foreignKey({
            columns: [columns["campaignsID"]],
            foreignColumns: [campaigns.id],
            name: "payload_locked_documents_rels_campaigns_fk",
        }).onDelete("cascade"),
        mediaIdFk: foreignKey({
            columns: [columns["mediaID"]],
            foreignColumns: [media.id],
            name: "payload_locked_documents_rels_media_fk",
        }).onDelete("cascade"),
        policiesIdFk: foreignKey({
            columns: [columns["policiesID"]],
            foreignColumns: [policies.id],
            name: "payload_locked_documents_rels_policies_fk",
        }).onDelete("cascade"),
        "gift-cardsIdFk": foreignKey({
            columns: [columns["gift-cardsID"]],
            foreignColumns: [gift_cards.id],
            name: "payload_locked_documents_rels_gift_cards_fk",
        }).onDelete("cascade"),
        themesIdFk: foreignKey({
            columns: [columns["themesID"]],
            foreignColumns: [themes.id],
            name: "payload_locked_documents_rels_themes_fk",
        }).onDelete("cascade"),
        cartsIdFk: foreignKey({
            columns: [columns["cartsID"]],
            foreignColumns: [carts.id],
            name: "payload_locked_documents_rels_carts_fk",
        }).onDelete("cascade"),
        "hero-pageIdFk": foreignKey({
            columns: [columns["hero-pageID"]],
            foreignColumns: [hero_page.id],
            name: "payload_locked_documents_rels_hero_page_fk",
        }).onDelete("cascade"),
        "footer-pageIdFk": foreignKey({
            columns: [columns["footer-pageID"]],
            foreignColumns: [footer_page.id],
            name: "payload_locked_documents_rels_footer_page_fk",
        }).onDelete("cascade"),
        pluginsIdFk: foreignKey({
            columns: [columns["pluginsID"]],
            foreignColumns: [plugins.id],
            name: "payload_locked_documents_rels_plugins_fk",
        }).onDelete("cascade"),
        paymentsIdFk: foreignKey({
            columns: [columns["paymentsID"]],
            foreignColumns: [payments.id],
            name: "payload_locked_documents_rels_payments_fk",
        }).onDelete("cascade"),
        locationsIdFk: foreignKey({
            columns: [columns["locationsID"]],
            foreignColumns: [locations.id],
            name: "payload_locked_documents_rels_locations_fk",
        }).onDelete("cascade"),
        shippingIdFk: foreignKey({
            columns: [columns["shippingID"]],
            foreignColumns: [shipping.id],
            name: "payload_locked_documents_rels_shipping_fk",
        }).onDelete("cascade"),
        "checkout-sessionsIdFk": foreignKey({
            columns: [columns["checkout-sessionsID"]],
            foreignColumns: [checkout_sessions.id],
            name: "payload_locked_documents_rels_checkout_sessions_fk",
        }).onDelete("cascade"),
        "cj-settingsIdFk": foreignKey({
            columns: [columns["cj-settingsID"]],
            foreignColumns: [cj_settings.id],
            name: "payload_locked_documents_rels_cj_settings_fk",
        }).onDelete("cascade"),
        exportsIdFk: foreignKey({
            columns: [columns["exportsID"]],
            foreignColumns: [exports.id],
            name: "payload_locked_documents_rels_exports_fk",
        }).onDelete("cascade"),
        "email-templatesIdFk": foreignKey({
            columns: [columns["email-templatesID"]],
            foreignColumns: [email_templates.id],
            name: "payload_locked_documents_rels_email_templates_fk",
        }).onDelete("cascade"),
        "payload-jobsIdFk": foreignKey({
            columns: [columns["payload-jobsID"]],
            foreignColumns: [payload_jobs.id],
            name: "payload_locked_documents_rels_payload_jobs_fk",
        }).onDelete("cascade"),
    })
);

export const payload_preferences = sqliteTable(
    "payload_preferences",
    {
        id: integer("id").primaryKey(),
        key: text("key"),
        value: text("value", { mode: "json" }),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        payload_preferences_key_idx: index("payload_preferences_key_idx").on(
            columns.key
        ),
        payload_preferences_updated_at_idx: index(
            "payload_preferences_updated_at_idx"
        ).on(columns.updatedAt),
        payload_preferences_created_at_idx: index(
            "payload_preferences_created_at_idx"
        ).on(columns.createdAt),
    })
);

export const payload_preferences_rels = sqliteTable(
    "payload_preferences_rels",
    {
        id: integer("id").primaryKey(),
        order: integer("order"),
        parent: integer("parent_id").notNull(),
        path: text("path").notNull(),
        usersID: integer("users_id"),
    },
    (columns) => ({
        order: index("payload_preferences_rels_order_idx").on(columns.order),
        parentIdx: index("payload_preferences_rels_parent_idx").on(
            columns.parent
        ),
        pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
        payload_preferences_rels_users_id_idx: index(
            "payload_preferences_rels_users_id_idx"
        ).on(columns.usersID),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [payload_preferences.id],
            name: "payload_preferences_rels_parent_fk",
        }).onDelete("cascade"),
        usersIdFk: foreignKey({
            columns: [columns["usersID"]],
            foreignColumns: [users.id],
            name: "payload_preferences_rels_users_fk",
        }).onDelete("cascade"),
    })
);

export const payload_migrations = sqliteTable(
    "payload_migrations",
    {
        id: integer("id").primaryKey(),
        name: text("name"),
        batch: numeric("batch"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        payload_migrations_updated_at_idx: index(
            "payload_migrations_updated_at_idx"
        ).on(columns.updatedAt),
        payload_migrations_created_at_idx: index(
            "payload_migrations_created_at_idx"
        ).on(columns.createdAt),
    })
);

export const store_settings = sqliteTable("store_settings", {
    id: integer("id").primaryKey(),
    name: text("name").default("Vya-dove"),
    currency: text("currency", {
        enum: [
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BOV",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BYN",
            "BZD",
            "CAD",
            "CDF",
            "CHE",
            "CHF",
            "CHW",
            "CLF",
            "CLP",
            "CNY",
            "COP",
            "COU",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EGP",
            "ERN",
            "ETB",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRU",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MXV",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLE",
            "SOS",
            "SRD",
            "SSP",
            "STN",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRY",
            "TTD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "USN",
            "UYI",
            "UYU",
            "UYW",
            "UZS",
            "VED",
            "VES",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XAG",
            "XAU",
            "XBA",
            "XBB",
            "XBC",
            "XBD",
            "XCD",
            "XDR",
            "XOF",
            "XPD",
            "XPF",
            "XPT",
            "XSU",
            "XTS",
            "XUA",
            "XXX",
            "YER",
            "ZAR",
            "ZMW",
            "ZWG",
        ],
    }).default("USD"),
    updatedAt: text("updated_at").default(
        sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`
    ),
    createdAt: text("created_at").default(
        sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`
    ),
});

export const relations_orders_timeline = relations(
    orders_timeline,
    ({ one }) => ({
        _parentID: one(orders, {
            fields: [orders_timeline._parentID],
            references: [orders.id],
            relationName: "timeline",
        }),
        createdBy: one(users, {
            fields: [orders_timeline.createdBy],
            references: [users.id],
            relationName: "createdBy",
        }),
    })
);
export const relations_orders = relations(orders, ({ one, many }) => ({
    user: one(users, {
        fields: [orders.user],
        references: [users.id],
        relationName: "user",
    }),
    cart: one(carts, {
        fields: [orders.cart],
        references: [carts.id],
        relationName: "cart",
    }),
    payment: one(payments, {
        fields: [orders.payment],
        references: [payments.id],
        relationName: "payment",
    }),
    shipping: one(shipping, {
        fields: [orders.shipping],
        references: [shipping.id],
        relationName: "shipping",
    }),
    timeline: many(orders_timeline, {
        relationName: "timeline",
    }),
}));
export const relations_collections = relations(collections, () => ({}));
export const relations_products_sales_channels = relations(
    products_sales_channels,
    ({ one }) => ({
        parent: one(products, {
            fields: [products_sales_channels.parent],
            references: [products.id],
            relationName: "salesChannels",
        }),
    })
);
export const relations_products_variant_options = relations(
    products_variant_options,
    ({ one }) => ({
        _parentID: one(products, {
            fields: [products_variant_options._parentID],
            references: [products.id],
            relationName: "variantOptions",
        }),
    })
);
export const relations_products_variants_options = relations(
    products_variants_options,
    ({ one }) => ({
        _parentID: one(products_variants, {
            fields: [products_variants_options._parentID],
            references: [products_variants.id],
            relationName: "options",
        }),
    })
);
export const relations_products_variants = relations(
    products_variants,
    ({ one, many }) => ({
        _parentID: one(products, {
            fields: [products_variants._parentID],
            references: [products.id],
            relationName: "variants",
        }),
        options: many(products_variants_options, {
            relationName: "options",
        }),
    })
);
export const relations_products_custom_fields = relations(
    products_custom_fields,
    ({ one }) => ({
        _parentID: one(products, {
            fields: [products_custom_fields._parentID],
            references: [products.id],
            relationName: "customFields",
        }),
    })
);
export const relations_products_texts = relations(
    products_texts,
    ({ one }) => ({
        parent: one(products, {
            fields: [products_texts.parent],
            references: [products.id],
            relationName: "_texts",
        }),
    })
);
export const relations_products_rels = relations(products_rels, ({ one }) => ({
    parent: one(products, {
        fields: [products_rels.parent],
        references: [products.id],
        relationName: "_rels",
    }),
    collectionsID: one(collections, {
        fields: [products_rels.collectionsID],
        references: [collections.id],
        relationName: "collections",
    }),
    mediaID: one(media, {
        fields: [products_rels.mediaID],
        references: [media.id],
        relationName: "media",
    }),
}));
export const relations_products = relations(products, ({ many }) => ({
    salesChannels: many(products_sales_channels, {
        relationName: "salesChannels",
    }),
    variantOptions: many(products_variant_options, {
        relationName: "variantOptions",
    }),
    variants: many(products_variants, {
        relationName: "variants",
    }),
    customFields: many(products_custom_fields, {
        relationName: "customFields",
    }),
    _texts: many(products_texts, {
        relationName: "_texts",
    }),
    _rels: many(products_rels, {
        relationName: "_rels",
    }),
}));
export const relations_users_roles = relations(users_roles, ({ one }) => ({
    parent: one(users, {
        fields: [users_roles.parent],
        references: [users.id],
        relationName: "roles",
    }),
}));
export const relations_users_sessions = relations(
    users_sessions,
    ({ one }) => ({
        _parentID: one(users, {
            fields: [users_sessions._parentID],
            references: [users.id],
            relationName: "sessions",
        }),
    })
);
export const relations_users = relations(users, ({ many }) => ({
    roles: many(users_roles, {
        relationName: "roles",
    }),
    sessions: many(users_sessions, {
        relationName: "sessions",
    }),
}));
export const relations_campaigns_rels = relations(
    campaigns_rels,
    ({ one }) => ({
        parent: one(campaigns, {
            fields: [campaigns_rels.parent],
            references: [campaigns.id],
            relationName: "_rels",
        }),
        usersID: one(users, {
            fields: [campaigns_rels.usersID],
            references: [users.id],
            relationName: "users",
        }),
    })
);
export const relations_campaigns = relations(campaigns, ({ one, many }) => ({
    emailTemplate: one(email_templates, {
        fields: [campaigns.emailTemplate],
        references: [email_templates.id],
        relationName: "emailTemplate",
    }),
    _rels: many(campaigns_rels, {
        relationName: "_rels",
    }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_policies = relations(policies, () => ({}));
export const relations_gift_cards = relations(gift_cards, ({ one }) => ({
    customer: one(users, {
        fields: [gift_cards.customer],
        references: [users.id],
        relationName: "customer",
    }),
}));
export const relations_themes_blocks_builder_io = relations(
    themes_blocks_builder_io,
    ({ one }) => ({
        _parentID: one(themes, {
            fields: [themes_blocks_builder_io._parentID],
            references: [themes.id],
            relationName: "_blocks_builder-io",
        }),
    })
);
export const relations_themes_blocks_custom_storefront_block = relations(
    themes_blocks_custom_storefront_block,
    ({ one }) => ({
        _parentID: one(themes, {
            fields: [themes_blocks_custom_storefront_block._parentID],
            references: [themes.id],
            relationName: "_blocks_custom-storefront-block",
        }),
    })
);
export const relations_themes_texts = relations(themes_texts, ({ one }) => ({
    parent: one(themes, {
        fields: [themes_texts.parent],
        references: [themes.id],
        relationName: "_texts",
    }),
}));
export const relations_themes = relations(themes, ({ many }) => ({
    "_blocks_builder-io": many(themes_blocks_builder_io, {
        relationName: "_blocks_builder-io",
    }),
    "_blocks_custom-storefront-block": many(
        themes_blocks_custom_storefront_block,
        {
            relationName: "_blocks_custom-storefront-block",
        }
    ),
    _texts: many(themes_texts, {
        relationName: "_texts",
    }),
}));
export const relations_carts_cart_items = relations(
    carts_cart_items,
    ({ one }) => ({
        _parentID: one(carts, {
            fields: [carts_cart_items._parentID],
            references: [carts.id],
            relationName: "cartItems",
        }),
        product: one(products, {
            fields: [carts_cart_items.product],
            references: [products.id],
            relationName: "product",
        }),
    })
);
export const relations_carts = relations(carts, ({ one, many }) => ({
    customer: one(users, {
        fields: [carts.customer],
        references: [users.id],
        relationName: "customer",
    }),
    cartItems: many(carts_cart_items, {
        relationName: "cartItems",
    }),
}));
export const relations_hero_page_blocks_hero = relations(
    hero_page_blocks_hero,
    ({ one }) => ({
        _parentID: one(hero_page, {
            fields: [hero_page_blocks_hero._parentID],
            references: [hero_page.id],
            relationName: "_blocks_hero",
        }),
        backgroundImage: one(media, {
            fields: [hero_page_blocks_hero.backgroundImage],
            references: [media.id],
            relationName: "backgroundImage",
        }),
    })
);
export const relations_hero_page_blocks_carousel = relations(
    hero_page_blocks_carousel,
    ({ one }) => ({
        _parentID: one(hero_page, {
            fields: [hero_page_blocks_carousel._parentID],
            references: [hero_page.id],
            relationName: "_blocks_carousel",
        }),
        backgroundImage: one(media, {
            fields: [hero_page_blocks_carousel.backgroundImage],
            references: [media.id],
            relationName: "backgroundImage",
        }),
    })
);
export const relations_hero_page_rels = relations(
    hero_page_rels,
    ({ one }) => ({
        parent: one(hero_page, {
            fields: [hero_page_rels.parent],
            references: [hero_page.id],
            relationName: "_rels",
        }),
        mediaID: one(media, {
            fields: [hero_page_rels.mediaID],
            references: [media.id],
            relationName: "media",
        }),
    })
);
export const relations_hero_page = relations(hero_page, ({ many }) => ({
    _blocks_hero: many(hero_page_blocks_hero, {
        relationName: "_blocks_hero",
    }),
    _blocks_carousel: many(hero_page_blocks_carousel, {
        relationName: "_blocks_carousel",
    }),
    _rels: many(hero_page_rels, {
        relationName: "_rels",
    }),
}));
export const relations_footer_page_blocks_basic_footer = relations(
    footer_page_blocks_basic_footer,
    ({ one }) => ({
        _parentID: one(footer_page, {
            fields: [footer_page_blocks_basic_footer._parentID],
            references: [footer_page.id],
            relationName: "_blocks_basic-footer",
        }),
    })
);
export const relations_footer_page = relations(footer_page, ({ many }) => ({
    "_blocks_basic-footer": many(footer_page_blocks_basic_footer, {
        relationName: "_blocks_basic-footer",
    }),
}));
export const relations_plugins = relations(plugins, () => ({}));
export const relations_payments_blocks_manual_details = relations(
    payments_blocks_manual_details,
    ({ one }) => ({
        _parentID: one(payments_blocks_manual, {
            fields: [payments_blocks_manual_details._parentID],
            references: [payments_blocks_manual.id],
            relationName: "details",
        }),
    })
);
export const relations_payments_blocks_manual = relations(
    payments_blocks_manual,
    ({ one, many }) => ({
        _parentID: one(payments, {
            fields: [payments_blocks_manual._parentID],
            references: [payments.id],
            relationName: "_blocks_manual",
        }),
        details: many(payments_blocks_manual_details, {
            relationName: "details",
        }),
    })
);
export const relations_payments_blocks_stripe = relations(
    payments_blocks_stripe,
    ({ one }) => ({
        _parentID: one(payments, {
            fields: [payments_blocks_stripe._parentID],
            references: [payments.id],
            relationName: "_blocks_stripe",
        }),
    })
);
export const relations_payments = relations(payments, ({ many }) => ({
    _blocks_manual: many(payments_blocks_manual, {
        relationName: "_blocks_manual",
    }),
    _blocks_stripe: many(payments_blocks_stripe, {
        relationName: "_blocks_stripe",
    }),
}));
export const relations_locations = relations(locations, () => ({}));
export const relations_shipping_blocks_custom_shipping = relations(
    shipping_blocks_custom_shipping,
    ({ one }) => ({
        _parentID: one(shipping, {
            fields: [shipping_blocks_custom_shipping._parentID],
            references: [shipping.id],
            relationName: "_blocks_custom-shipping",
        }),
    })
);
export const relations_shipping = relations(shipping, ({ one, many }) => ({
    location: one(locations, {
        fields: [shipping.location],
        references: [locations.id],
        relationName: "location",
    }),
    "_blocks_custom-shipping": many(shipping_blocks_custom_shipping, {
        relationName: "_blocks_custom-shipping",
    }),
}));
export const relations_checkout_sessions = relations(
    checkout_sessions,
    ({ one }) => ({
        customer: one(users, {
            fields: [checkout_sessions.customer],
            references: [users.id],
            relationName: "customer",
        }),
        cart: one(carts, {
            fields: [checkout_sessions.cart],
            references: [carts.id],
            relationName: "cart",
        }),
        shipping: one(shipping, {
            fields: [checkout_sessions.shipping],
            references: [shipping.id],
            relationName: "shipping",
        }),
        payment: one(payments, {
            fields: [checkout_sessions.payment],
            references: [payments.id],
            relationName: "payment",
        }),
    })
);
export const relations_cj_settings_items = relations(
    cj_settings_items,
    ({ one }) => ({
        _parentID: one(cj_settings, {
            fields: [cj_settings_items._parentID],
            references: [cj_settings.id],
            relationName: "items",
        }),
    })
);
export const relations_cj_settings = relations(
    cj_settings,
    ({ one, many }) => ({
        pod: one(media, {
            fields: [cj_settings.pod],
            references: [media.id],
            relationName: "pod",
        }),
        items: many(cj_settings_items, {
            relationName: "items",
        }),
    })
);
export const relations_exports_texts = relations(exports_texts, ({ one }) => ({
    parent: one(exports, {
        fields: [exports_texts.parent],
        references: [exports.id],
        relationName: "_texts",
    }),
}));
export const relations_exports = relations(exports, ({ many }) => ({
    _texts: many(exports_texts, {
        relationName: "_texts",
    }),
}));
export const relations_email_templates = relations(email_templates, () => ({}));
export const relations_payload_jobs_log = relations(
    payload_jobs_log,
    ({ one }) => ({
        _parentID: one(payload_jobs, {
            fields: [payload_jobs_log._parentID],
            references: [payload_jobs.id],
            relationName: "log",
        }),
    })
);
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
    log: many(payload_jobs_log, {
        relationName: "log",
    }),
}));
export const relations_payload_locked_documents_rels = relations(
    payload_locked_documents_rels,
    ({ one }) => ({
        parent: one(payload_locked_documents, {
            fields: [payload_locked_documents_rels.parent],
            references: [payload_locked_documents.id],
            relationName: "_rels",
        }),
        ordersID: one(orders, {
            fields: [payload_locked_documents_rels.ordersID],
            references: [orders.id],
            relationName: "orders",
        }),
        collectionsID: one(collections, {
            fields: [payload_locked_documents_rels.collectionsID],
            references: [collections.id],
            relationName: "collections",
        }),
        productsID: one(products, {
            fields: [payload_locked_documents_rels.productsID],
            references: [products.id],
            relationName: "products",
        }),
        usersID: one(users, {
            fields: [payload_locked_documents_rels.usersID],
            references: [users.id],
            relationName: "users",
        }),
        campaignsID: one(campaigns, {
            fields: [payload_locked_documents_rels.campaignsID],
            references: [campaigns.id],
            relationName: "campaigns",
        }),
        mediaID: one(media, {
            fields: [payload_locked_documents_rels.mediaID],
            references: [media.id],
            relationName: "media",
        }),
        policiesID: one(policies, {
            fields: [payload_locked_documents_rels.policiesID],
            references: [policies.id],
            relationName: "policies",
        }),
        "gift-cardsID": one(gift_cards, {
            fields: [payload_locked_documents_rels["gift-cardsID"]],
            references: [gift_cards.id],
            relationName: "gift-cards",
        }),
        themesID: one(themes, {
            fields: [payload_locked_documents_rels.themesID],
            references: [themes.id],
            relationName: "themes",
        }),
        cartsID: one(carts, {
            fields: [payload_locked_documents_rels.cartsID],
            references: [carts.id],
            relationName: "carts",
        }),
        "hero-pageID": one(hero_page, {
            fields: [payload_locked_documents_rels["hero-pageID"]],
            references: [hero_page.id],
            relationName: "hero-page",
        }),
        "footer-pageID": one(footer_page, {
            fields: [payload_locked_documents_rels["footer-pageID"]],
            references: [footer_page.id],
            relationName: "footer-page",
        }),
        pluginsID: one(plugins, {
            fields: [payload_locked_documents_rels.pluginsID],
            references: [plugins.id],
            relationName: "plugins",
        }),
        paymentsID: one(payments, {
            fields: [payload_locked_documents_rels.paymentsID],
            references: [payments.id],
            relationName: "payments",
        }),
        locationsID: one(locations, {
            fields: [payload_locked_documents_rels.locationsID],
            references: [locations.id],
            relationName: "locations",
        }),
        shippingID: one(shipping, {
            fields: [payload_locked_documents_rels.shippingID],
            references: [shipping.id],
            relationName: "shipping",
        }),
        "checkout-sessionsID": one(checkout_sessions, {
            fields: [payload_locked_documents_rels["checkout-sessionsID"]],
            references: [checkout_sessions.id],
            relationName: "checkout-sessions",
        }),
        "cj-settingsID": one(cj_settings, {
            fields: [payload_locked_documents_rels["cj-settingsID"]],
            references: [cj_settings.id],
            relationName: "cj-settings",
        }),
        exportsID: one(exports, {
            fields: [payload_locked_documents_rels.exportsID],
            references: [exports.id],
            relationName: "exports",
        }),
        "email-templatesID": one(email_templates, {
            fields: [payload_locked_documents_rels["email-templatesID"]],
            references: [email_templates.id],
            relationName: "email-templates",
        }),
        "payload-jobsID": one(payload_jobs, {
            fields: [payload_locked_documents_rels["payload-jobsID"]],
            references: [payload_jobs.id],
            relationName: "payload-jobs",
        }),
    })
);
export const relations_payload_locked_documents = relations(
    payload_locked_documents,
    ({ many }) => ({
        _rels: many(payload_locked_documents_rels, {
            relationName: "_rels",
        }),
    })
);
export const relations_payload_preferences_rels = relations(
    payload_preferences_rels,
    ({ one }) => ({
        parent: one(payload_preferences, {
            fields: [payload_preferences_rels.parent],
            references: [payload_preferences.id],
            relationName: "_rels",
        }),
        usersID: one(users, {
            fields: [payload_preferences_rels.usersID],
            references: [users.id],
            relationName: "users",
        }),
    })
);
export const relations_payload_preferences = relations(
    payload_preferences,
    ({ many }) => ({
        _rels: many(payload_preferences_rels, {
            relationName: "_rels",
        }),
    })
);
export const relations_payload_migrations = relations(
    payload_migrations,
    () => ({})
);
export const relations_store_settings = relations(store_settings, () => ({}));

type DatabaseSchema = {
    orders_timeline: typeof orders_timeline;
    orders: typeof orders;
    collections: typeof collections;
    products_sales_channels: typeof products_sales_channels;
    products_variant_options: typeof products_variant_options;
    products_variants_options: typeof products_variants_options;
    products_variants: typeof products_variants;
    products_custom_fields: typeof products_custom_fields;
    products: typeof products;
    products_texts: typeof products_texts;
    products_rels: typeof products_rels;
    users_roles: typeof users_roles;
    users_sessions: typeof users_sessions;
    users: typeof users;
    campaigns: typeof campaigns;
    campaigns_rels: typeof campaigns_rels;
    media: typeof media;
    policies: typeof policies;
    gift_cards: typeof gift_cards;
    themes_blocks_builder_io: typeof themes_blocks_builder_io;
    themes_blocks_custom_storefront_block: typeof themes_blocks_custom_storefront_block;
    themes: typeof themes;
    themes_texts: typeof themes_texts;
    carts_cart_items: typeof carts_cart_items;
    carts: typeof carts;
    hero_page_blocks_hero: typeof hero_page_blocks_hero;
    hero_page_blocks_carousel: typeof hero_page_blocks_carousel;
    hero_page: typeof hero_page;
    hero_page_rels: typeof hero_page_rels;
    footer_page_blocks_basic_footer: typeof footer_page_blocks_basic_footer;
    footer_page: typeof footer_page;
    plugins: typeof plugins;
    payments_blocks_manual_details: typeof payments_blocks_manual_details;
    payments_blocks_manual: typeof payments_blocks_manual;
    payments_blocks_stripe: typeof payments_blocks_stripe;
    payments: typeof payments;
    locations: typeof locations;
    shipping_blocks_custom_shipping: typeof shipping_blocks_custom_shipping;
    shipping: typeof shipping;
    checkout_sessions: typeof checkout_sessions;
    cj_settings_items: typeof cj_settings_items;
    cj_settings: typeof cj_settings;
    exports: typeof exports;
    exports_texts: typeof exports_texts;
    email_templates: typeof email_templates;
    payload_jobs_log: typeof payload_jobs_log;
    payload_jobs: typeof payload_jobs;
    payload_locked_documents: typeof payload_locked_documents;
    payload_locked_documents_rels: typeof payload_locked_documents_rels;
    payload_preferences: typeof payload_preferences;
    payload_preferences_rels: typeof payload_preferences_rels;
    payload_migrations: typeof payload_migrations;
    store_settings: typeof store_settings;
    relations_orders_timeline: typeof relations_orders_timeline;
    relations_orders: typeof relations_orders;
    relations_collections: typeof relations_collections;
    relations_products_sales_channels: typeof relations_products_sales_channels;
    relations_products_variant_options: typeof relations_products_variant_options;
    relations_products_variants_options: typeof relations_products_variants_options;
    relations_products_variants: typeof relations_products_variants;
    relations_products_custom_fields: typeof relations_products_custom_fields;
    relations_products_texts: typeof relations_products_texts;
    relations_products_rels: typeof relations_products_rels;
    relations_products: typeof relations_products;
    relations_users_roles: typeof relations_users_roles;
    relations_users_sessions: typeof relations_users_sessions;
    relations_users: typeof relations_users;
    relations_campaigns_rels: typeof relations_campaigns_rels;
    relations_campaigns: typeof relations_campaigns;
    relations_media: typeof relations_media;
    relations_policies: typeof relations_policies;
    relations_gift_cards: typeof relations_gift_cards;
    relations_themes_blocks_builder_io: typeof relations_themes_blocks_builder_io;
    relations_themes_blocks_custom_storefront_block: typeof relations_themes_blocks_custom_storefront_block;
    relations_themes_texts: typeof relations_themes_texts;
    relations_themes: typeof relations_themes;
    relations_carts_cart_items: typeof relations_carts_cart_items;
    relations_carts: typeof relations_carts;
    relations_hero_page_blocks_hero: typeof relations_hero_page_blocks_hero;
    relations_hero_page_blocks_carousel: typeof relations_hero_page_blocks_carousel;
    relations_hero_page_rels: typeof relations_hero_page_rels;
    relations_hero_page: typeof relations_hero_page;
    relations_footer_page_blocks_basic_footer: typeof relations_footer_page_blocks_basic_footer;
    relations_footer_page: typeof relations_footer_page;
    relations_plugins: typeof relations_plugins;
    relations_payments_blocks_manual_details: typeof relations_payments_blocks_manual_details;
    relations_payments_blocks_manual: typeof relations_payments_blocks_manual;
    relations_payments_blocks_stripe: typeof relations_payments_blocks_stripe;
    relations_payments: typeof relations_payments;
    relations_locations: typeof relations_locations;
    relations_shipping_blocks_custom_shipping: typeof relations_shipping_blocks_custom_shipping;
    relations_shipping: typeof relations_shipping;
    relations_checkout_sessions: typeof relations_checkout_sessions;
    relations_cj_settings_items: typeof relations_cj_settings_items;
    relations_cj_settings: typeof relations_cj_settings;
    relations_exports_texts: typeof relations_exports_texts;
    relations_exports: typeof relations_exports;
    relations_email_templates: typeof relations_email_templates;
    relations_payload_jobs_log: typeof relations_payload_jobs_log;
    relations_payload_jobs: typeof relations_payload_jobs;
    relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
    relations_payload_locked_documents: typeof relations_payload_locked_documents;
    relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
    relations_payload_preferences: typeof relations_payload_preferences;
    relations_payload_migrations: typeof relations_payload_migrations;
    relations_store_settings: typeof relations_store_settings;
};

declare module "@payloadcms/db-sqlite" {
    export interface GeneratedDatabaseSchema {
        schema: DatabaseSchema;
    }
}
